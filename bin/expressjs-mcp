#!/usr/bin/env node

/**
 * Express MCP CLI
 * 
 * Native MCP server implementation using the official SDK.
 * This replaces the bridge scripts.
 * 
 * Usage:
 *   expressjs-mcp [options]
 * 
 * Options:
 *   --url <url>    Express MCP URL (default: http://localhost:3000/mcp)
 *   --debug        Enable debug logging
 *   --help         Show help
 * 
 * Environment Variables:
 *   EXPRESS_MCP_URL - URL of Express MCP server
 *   DEBUG - Enable debug mode
 */

// Use dynamic import for ESM compatibility
async function main() {
  const module = await import('../dist/mcp-server.js');
  const { ExpressMCPServer } = module;

  // Parse command line arguments
  const args = process.argv.slice(2);
  const options = {
    baseUrl: process.env.EXPRESS_MCP_URL || 'http://localhost:3000/mcp',
    debug: process.env.DEBUG === 'true',
  };

  for (let i = 0; i < args.length; i++) {
    switch (args[i]) {
      case '--url':
        options.baseUrl = args[++i];
        break;
      case '--debug':
        options.debug = true;
        break;
      case '--help':
      case '-h':
        console.log(`Express MCP Server

Usage:
  expressjs-mcp [options]

Options:
  --url <url>    Express MCP URL (default: http://localhost:3000/mcp)
  --debug        Enable debug logging
  --help         Show help

Environment Variables:
  EXPRESS_MCP_URL - URL of Express MCP server
  DEBUG - Enable debug mode

Examples:
  expressjs-mcp
  expressjs-mcp --url http://localhost:8080/mcp
  expressjs-mcp --debug
  EXPRESS_MCP_URL=http://api.example.com/mcp expressjs-mcp
`);
        process.exit(0);
        break;
      default:
        if (args[i].startsWith('-')) {
          console.error(`Unknown option: ${args[i]}`);
          console.error('Use --help for usage information');
          process.exit(1);
        }
    }
  }

  // Create and start server
  const server = new ExpressMCPServer(options);

  await server.start().catch(error => {
    console.error('Failed to start MCP server:', error);
    process.exit(1);
  });

  // Handle graceful shutdown
  process.on('SIGINT', () => {
    console.error('\nShutting down...');
    process.exit(0);
  });

  process.on('SIGTERM', () => {
    console.error('\nShutting down...');
    process.exit(0);
  });
}

// Run the main function
main().catch(error => {
  console.error('Fatal error:', error);
  process.exit(1);
});